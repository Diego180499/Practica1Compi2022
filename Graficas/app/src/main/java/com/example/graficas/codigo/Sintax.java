//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------
package com.example.graficas.codigo;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.XMLElement;

/**
 * CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {
    
    public final Class getSymbolContainer() {
        return sym.class;
    }

    /**
     * Default constructor.
     */
    @Deprecated
    public Sintax() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    @Deprecated
    public Sintax(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
        "\000\057\000\002\002\004\000\002\002\005\000\002\002"
        + "\004\000\002\003\003\000\002\003\003\000\002\003\004"
        + "\000\002\003\004\000\002\004\012\000\002\012\006\000"
        + "\002\013\010\000\002\011\003\000\002\011\005\000\002"
        + "\014\010\000\002\015\003\000\002\015\005\000\002\016"
        + "\010\000\002\020\007\000\002\020\011\000\002\005\020"
        + "\000\002\005\017\000\002\021\006\000\002\022\010\000"
        + "\002\023\003\000\002\023\005\000\002\024\010\000\002"
        + "\025\003\000\002\025\005\000\002\026\006\000\002\030"
        + "\010\000\002\027\007\000\002\027\011\000\002\031\006"
        + "\000\002\017\003\000\002\007\004\000\002\007\006\000"
        + "\002\007\003\000\002\007\004\000\002\007\003\000\002"
        + "\007\005\000\002\010\004\000\002\010\004\000\002\010"
        + "\004\000\002\010\004\000\002\032\007\000\002\032\010"
        + "\000\002\006\007\000\002\006\010"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
        "\000\223\000\006\004\006\005\004\001\002\000\004\010"
        + "\221\001\002\000\004\002\220\001\002\000\006\006\026"
        + "\007\027\001\002\000\004\050\015\001\002\000\006\004"
        + "\006\050\ufffd\001\002\000\004\004\006\001\002\000\006"
        + "\004\006\050\ufffe\001\002\000\004\050\ufffc\001\002\000"
        + "\004\050\015\001\002\000\004\042\017\001\002\000\004"
        + "\002\000\001\002\000\004\032\020\001\002\000\004\043"
        + "\021\001\002\000\004\022\022\001\002\000\006\002\uffd6"
        + "\050\015\001\002\000\004\002\uffd5\001\002\000\004\050"
        + "\ufffb\001\002\000\004\002\uffff\001\002\000\004\044\147"
        + "\001\002\000\004\044\030\001\002\000\004\011\031\001"
        + "\002\000\004\026\144\001\002\000\004\021\033\001\002"
        + "\000\004\026\034\001\002\000\006\046\035\047\036\001"
        + "\002\000\004\022\131\001\002\000\004\022\037\001\002"
        + "\000\004\014\041\001\002\000\004\017\053\001\002\000"
        + "\004\026\042\001\002\000\004\024\043\001\002\000\004"
        + "\032\045\001\002\000\004\025\050\001\002\000\006\025"
        + "\uffeb\034\046\001\002\000\004\032\045\001\002\000\004"
        + "\025\uffea\001\002\000\004\022\051\001\002\000\004\017"
        + "\uffec\001\002\000\004\020\106\001\002\000\004\026\054"
        + "\001\002\000\004\024\055\001\002\000\010\033\063\035"
        + "\056\042\057\001\002\000\024\022\uffde\025\uffde\034\uffde"
        + "\036\067\037\066\040\064\041\070\043\uffde\045\uffde\001"
        + "\002\000\010\033\063\035\056\042\057\001\002\000\012"
        + "\022\uffe1\025\uffe1\034\uffe1\045\uffe1\001\002\000\004\025"
        + "\077\001\002\000\006\025\uffe8\034\075\001\002\000\024"
        + "\022\uffdc\025\uffdc\034\uffdc\036\067\037\066\040\064\041"
        + "\070\043\uffdc\045\uffdc\001\002\000\010\033\063\035\056"
        + "\042\057\001\002\000\014\022\uffdd\025\uffdd\034\uffdd\043"
        + "\uffdd\045\uffdd\001\002\000\010\033\063\035\056\042\057"
        + "\001\002\000\010\033\063\035\056\042\057\001\002\000"
        + "\010\033\063\035\056\042\057\001\002\000\014\022\uffd7"
        + "\025\uffd7\034\uffd7\043\uffd7\045\uffd7\001\002\000\014\022"
        + "\uffda\025\uffda\034\uffda\043\uffda\045\uffda\001\002\000\014"
        + "\022\uffd9\025\uffd9\034\uffd9\043\uffd9\045\uffd9\001\002\000"
        + "\014\022\uffd8\025\uffd8\034\uffd8\043\uffd8\045\uffd8\001\002"
        + "\000\010\033\063\035\056\042\057\001\002\000\004\025"
        + "\uffe7\001\002\000\004\022\100\001\002\000\006\016\uffe9"
        + "\020\uffe9\001\002\000\004\043\102\001\002\000\024\022"
        + "\uffdb\025\uffdb\034\uffdb\036\067\037\066\040\064\041\070"
        + "\043\uffdb\045\uffdb\001\002\000\014\022\uffdf\025\uffdf\034"
        + "\uffdf\043\uffdf\045\uffdf\001\002\000\014\022\uffe0\025\uffe0"
        + "\034\uffe0\043\uffe0\045\uffe0\001\002\000\004\015\123\001"
        + "\002\000\004\026\107\001\002\000\004\024\110\001\002"
        + "\000\004\044\112\001\002\000\004\025\121\001\002\000"
        + "\010\033\063\035\056\042\057\001\002\000\004\034\114"
        + "\001\002\000\010\033\063\035\056\042\057\001\002\000"
        + "\004\045\116\001\002\000\006\025\uffe4\034\117\001\002"
        + "\000\004\044\112\001\002\000\004\025\uffe3\001\002\000"
        + "\004\022\122\001\002\000\004\015\uffe5\001\002\000\004"
        + "\026\126\001\002\000\004\045\125\001\002\000\006\004"
        + "\uffee\050\uffee\001\002\000\004\032\127\001\002\000\004"
        + "\022\130\001\002\000\004\045\uffe2\001\002\000\004\014"
        + "\041\001\002\000\004\017\053\001\002\000\004\016\134"
        + "\001\002\000\004\026\141\001\002\000\004\020\106\001"
        + "\002\000\004\015\123\001\002\000\004\045\140\001\002"
        + "\000\006\004\uffef\050\uffef\001\002\000\010\033\063\035"
        + "\056\042\057\001\002\000\004\022\143\001\002\000\004"
        + "\020\uffe6\001\002\000\004\032\145\001\002\000\004\022"
        + "\146\001\002\000\004\021\uffed\001\002\000\004\011\150"
        + "\001\002\000\004\026\215\001\002\000\004\012\152\001"
        + "\002\000\004\026\205\001\002\000\004\013\154\001\002"
        + "\000\004\026\175\001\002\000\004\020\157\001\002\000"
        + "\004\045\174\001\002\000\004\026\160\001\002\000\004"
        + "\024\161\001\002\000\004\044\163\001\002\000\004\025"
        + "\172\001\002\000\010\033\063\035\056\042\057\001\002"
        + "\000\004\034\165\001\002\000\010\033\063\035\056\042"
        + "\057\001\002\000\004\045\167\001\002\000\006\025\ufff1"
        + "\034\170\001\002\000\004\044\163\001\002\000\004\025"
        + "\ufff0\001\002\000\004\022\173\001\002\000\004\045\ufff2"
        + "\001\002\000\006\004\ufffa\050\ufffa\001\002\000\004\024"
        + "\176\001\002\000\010\033\063\035\056\042\057\001\002"
        + "\000\006\025\ufff4\034\203\001\002\000\004\025\201\001"
        + "\002\000\004\022\202\001\002\000\004\020\ufff5\001\002"
        + "\000\010\033\063\035\056\042\057\001\002\000\004\025"
        + "\ufff3\001\002\000\004\024\206\001\002\000\004\032\207"
        + "\001\002\000\006\025\ufff7\034\213\001\002\000\004\025"
        + "\211\001\002\000\004\022\212\001\002\000\004\013\ufff8"
        + "\001\002\000\004\032\207\001\002\000\004\025\ufff6\001"
        + "\002\000\004\032\216\001\002\000\004\022\217\001\002"
        + "\000\004\012\ufff9\001\002\000\004\002\001\001\002\000"
        + "\004\023\222\001\002\000\010\033\063\035\056\042\057"
        + "\001\002\000\004\022\224\001\002\000\006\004\uffd4\005"
        + "\004\001\002\000\004\004\uffd3\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
        "\000\223\000\014\002\004\003\006\004\011\005\007\006"
        + "\010\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\004\032\024\001\001\000\010\003\023\004"
        + "\011\005\007\001\001\000\010\003\013\004\011\005\007"
        + "\001\001\000\010\003\012\004\011\005\007\001\001\000"
        + "\002\001\001\000\004\032\015\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\004\032\022\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\004\021\031\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\004\022\037\001\001"
        + "\000\004\024\051\001\001\000\002\001\001\000\002\001"
        + "\001\000\004\023\043\001\001\000\002\001\001\000\002"
        + "\001\001\000\004\023\046\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\004\030\104\001\001"
        + "\000\002\001\001\000\002\001\001\000\010\007\057\017"
        + "\061\025\060\001\001\000\004\010\103\001\001\000\004"
        + "\007\100\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\004\010\064\001\001\000\004\007\073"
        + "\001\001\000\002\001\001\000\004\007\072\001\001\000"
        + "\004\007\071\001\001\000\004\007\070\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\010\007\057\017\061\025\075\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\004\010\102\001\001\000\002\001\001\000\002"
        + "\001\001\000\004\031\123\001\001\000\002\001\001\000"
        + "\002\001\001\000\004\027\110\001\001\000\002\001\001"
        + "\000\006\007\057\017\112\001\001\000\002\001\001\000"
        + "\006\007\057\017\114\001\001\000\002\001\001\000\002"
        + "\001\001\000\004\027\117\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\004\022\131\001\001\000\004"
        + "\024\132\001\001\000\004\026\134\001\001\000\002\001"
        + "\001\000\004\030\135\001\001\000\004\031\136\001\001"
        + "\000\002\001\001\000\002\001\001\000\006\007\057\017"
        + "\141\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\012"
        + "\150\001\001\000\002\001\001\000\004\013\152\001\001"
        + "\000\002\001\001\000\004\014\154\001\001\000\002\001"
        + "\001\000\004\016\155\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\004\020\161\001\001\000"
        + "\002\001\001\000\006\007\057\017\163\001\001\000\002"
        + "\001\001\000\006\007\057\017\165\001\001\000\002\001"
        + "\001\000\002\001\001\000\004\020\170\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\010\007\057\015\177\017\176"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\010\007\057\015\203\017\176"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\011"
        + "\207\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\004\011\213\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\007"
        + "\222\001\001\000\002\001\001\000\004\006\224\001\001"
        + "\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$Sintax$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$Sintax$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    public Sintax(LexerCup lexer) {
        super(lexer);
    }

    private Symbol s;
    private static int cantidadExpresiones = 0;
    private static int cantidadBarras = 0;
    private static int cantidadPie = 0;
    private static ArrayList<GraficaBarra> graficasBarra = new ArrayList<>();
    private static ArrayList<GraficaPie> graficasPie = new ArrayList<>();
    private static String[] graficasEjecutadas;

    //*****ESTE MÉTODO ES PARA CREAR UNA GRÁFICA DE BARRAS, Y LA GUARDA EN UN ARRAY DE GRAFICAS DE BARRAS*****
    public void crearGraficaBarra(String titulo, String ejex, String ejey, String union) {
        AnalizadorExpresiones analizadorExpresiones = new AnalizadorExpresiones();
        String[] ejeX = ejex.split(",");
        String[] ejeY = ejey.split(",");
        String[] uniones = union.split(",");

        Double[] valoresEjeY = new Double[ejeY.length];
        for (int i = 0; i < valoresEjeY.length; i++) {
            Double valor;

            try {
                valor = analizadorExpresiones.evaluar(ejeY[i]);
                valoresEjeY[i] = valor;
            } catch (Excepciones ex) {
                Logger.getLogger(Sintax.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        //Aqui iniciamos a crear nuestra matriz de uniones*********
        Double[] valoresUniones = new Double[uniones.length];

        for (int i = 0; i < valoresUniones.length; i++) {
            double valor;

            try {
                valor = analizadorExpresiones.evaluar(uniones[i]);
                valoresUniones[i] = valor;
            } catch (Excepciones ex) {
                Logger.getLogger(Sintax.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        ArrayList<Double[]> valoresUnion = new ArrayList<>();

        for (int i = 0; i < valoresUniones.length; i += 2) {
            Double[] item = new Double[2];
            item[0] = valoresUniones[i];
            item[1] = valoresUniones[i + 1];
            valoresUnion.add(item);
        }
        //Finalizamos la matriz********

        GraficaBarra graficaBarra = new GraficaBarra(titulo, ejeX, valoresEjeY, valoresUnion);
        graficasBarra.add(graficaBarra);

    }

    //***ESTE MÉTODO ES PARA CREAR GRÁFICAS DE PIE***
    public void crearGraficaPie(String titulo, String tipo, String etiqueta, String valor, String total, String union, String extra) {

        AnalizadorExpresiones analizadorExpresiones = new AnalizadorExpresiones();
        String[] etiquetas = etiqueta.split(",");
        String[] valores = valor.split(",");
        String[] uniones = union.split(",");
        Double[] uniones2 = new Double[uniones.length];
        Double[] valorValores = new Double[valores.length];
        ArrayList<Double[]> valorUniones = new ArrayList<>();

        for (int i = 0; i < valores.length; i++) {
            double valor2;

            try {
                valor2 = analizadorExpresiones.evaluar(valores[i]);
                valorValores[i] = valor2;
            } catch (Excepciones ex) {
                Logger.getLogger(Sintax.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        for (int i = 0; i < uniones.length; i++) {
            double valor2;

            try {
                valor2 = analizadorExpresiones.evaluar(uniones[i]);
                uniones2[i] = valor2;
            } catch (Excepciones ex) {
                Logger.getLogger(Sintax.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        for (int i = 0; i < uniones2.length; i += 2) {
            Double[] arrayUniones = new Double[2];
            arrayUniones[0] = uniones2[i];
            arrayUniones[1] = uniones2[i + 1];
            valorUniones.add(arrayUniones);
        }

        GraficaPie graficaPie;
        if (tipo.equals("Porcentaje")) {
            graficaPie = new GraficaPie(titulo, tipo, etiquetas, valorValores, valorUniones, extra);
            graficasPie.add(graficaPie);
        } else {
            Double valorTotal;

            try {
                valorTotal = analizadorExpresiones.evaluar(total);
                graficaPie = new GraficaPie(titulo, tipo, etiquetas, valorValores, valorTotal, valorUniones, extra);
                graficasPie.add(graficaPie);
            } catch (Excepciones ex) {
                Logger.getLogger(Sintax.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }

    public static void addGraficaEjecutada(String nombresGraficas) {
        graficasEjecutadas = nombresGraficas.split(",");
    }

    public static String[] getGraficasEjecutadas() {
        return graficasEjecutadas;
    }

    public static ArrayList<GraficaBarra> getGraficaBarras() {

        return graficasBarra;
    }

    public void contarExpresion() {
        cantidadExpresiones++;
    }

    public void contarBarras() {
        cantidadBarras++;
    }

    public void contarPie() {
        cantidadPie++;
    }

    public static Integer getCantidadExpresiones() {
        return cantidadExpresiones;
    }

    public static Integer getCantidadBarras() {
        return cantidadBarras;
    }

    public static Integer getCantidadPie() {
        return cantidadPie;
    }

    public static ArrayList<GraficaPie> getGraficasPie() {
        return graficasPie;
    }

    public void syntax_error(Symbol s) {
        this.s = s;
    }

    public Symbol getS() {
        return this.s;
    }

    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$Sintax$actions {

        private final Sintax parser;

        /**
         * Constructor
         */
        CUP$Sintax$actions(Sintax parser) {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
                int CUP$Sintax$act_num,
                java_cup.runtime.lr_parser CUP$Sintax$parser,
                java.util.Stack CUP$Sintax$stack,
                int CUP$Sintax$top)
                throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$Sintax$result;

            /* select the action based on the action number */
            switch (CUP$Sintax$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= G1 EOF 
                {
                    Object RESULT = null;
                    int start_valleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int start_valright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    RESULT = start_val;
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$Sintax$parser.done_parsing();
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // G1 ::= D1 G EJECUTAR 
                {
                    Object RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    addGraficaEjecutada(e);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("G1", 0, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // G1 ::= G EJECUTAR 
                {
                    Object RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    addGraficaEjecutada(e);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("G1", 0, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // G ::= B 
                {
                    Object RESULT = null;
                    contarBarras();
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("G", 1, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // G ::= P 
                {
                    Object RESULT = null;
                    contarPie();
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("G", 1, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // G ::= B G 
                {
                    Object RESULT = null;
                    contarBarras();
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("G", 1, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // G ::= P G 
                {
                    Object RESULT = null;
                    contarPie();
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("G", 1, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // B ::= DEF BARRAS Llaves_a T X Y U Llaves_c 
                {
                    Object RESULT = null;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).right;
                    String t = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).value;
                    int xleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).left;
                    int xright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).right;
                    String x = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).value;
                    int yleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).left;
                    int yright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).right;
                    String y = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).value;
                    int uleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int uright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String u = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    crearGraficaBarra(t, x, y, u);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("B", 2, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 7)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // T ::= Titulo Dos_p Nombre P_coma 
                {
                    String RESULT = null;
                    int nleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int nright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String n = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    RESULT = String.format(n);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T", 8, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // X ::= ejeX Dos_p Corchete_a N Corchete_c P_coma 
                {
                    String RESULT = null;
                    int itemsleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).left;
                    int itemsright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).right;
                    String items = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).value;
                    RESULT = String.format(items);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("X", 9, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // N ::= Nombre 
                {
                    String RESULT = null;
                    int itemleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int itemright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String item = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(item);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N", 7, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // N ::= Nombre Coma N 
                {
                    String RESULT = null;
                    int itemleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).left;
                    int itemright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).right;
                    String item = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).value;
                    int comaleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int comaright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String coma = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    int itemsleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int itemsright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String items = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(item + coma + items);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N", 7, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // Y ::= ejeY Dos_p Corchete_a M Corchete_c P_coma 
                {
                    String RESULT = null;
                    int mleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).left;
                    int mright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).right;
                    String m = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).value;
                    RESULT = String.format(m);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Y", 10, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // M ::= EXPRESION 
                {
                    String RESULT = null;
                    int expresionleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int expresionright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String expresion = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(expresion);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M", 11, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // M ::= EXPRESION Coma M 
                {
                    String RESULT = null;
                    int expresionleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).left;
                    int expresionright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).right;
                    String expresion = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).value;
                    int comaleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int comaright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String coma = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    int mleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int mright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String m = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(expresion + coma + m);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M", 11, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // U ::= Unir Dos_p Corchete_a A Corchete_c P_coma 
                {
                    String RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).right;
                    String a = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).value;
                    RESULT = String.format(a);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("U", 12, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // A ::= Llaves_a EXPRESION Coma EXPRESION Llaves_c 
                {
                    String RESULT = null;
                    int llaleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).left;
                    int llaright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).right;
                    String lla = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).value;
                    int expresionleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).left;
                    int expresionright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).right;
                    String expresion = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).value;
                    int comaleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).left;
                    int comaright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).right;
                    String coma = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).value;
                    int expresion2left = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int expresion2right = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String expresion2 = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    int llcleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int llcright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String llc = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(expresion + coma + expresion2);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A", 14, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // A ::= Llaves_a EXPRESION Coma EXPRESION Llaves_c Coma A 
                {
                    String RESULT = null;
                    int llaleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 6)).left;
                    int llaright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 6)).right;
                    String lla = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 6)).value;
                    int expresionleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)).left;
                    int expresionright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)).right;
                    String expresion = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)).value;
                    int comaleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).left;
                    int comaright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).right;
                    String coma = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).value;
                    int expresion2left = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).left;
                    int expresion2right = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).right;
                    String expresion2 = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).value;
                    int llcleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).left;
                    int llcright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).right;
                    String llc = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).value;
                    int coma2left = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int coma2right = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String coma2 = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String a = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(expresion + coma + expresion2 + coma2 + a);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A", 14, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // P ::= DEF PIE Llaves_a Q Tipo Dos_p Cantidad P_coma L V R S E Llaves_c 
                {
                    Object RESULT = null;
                    int qleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 10)).left;
                    int qright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 10)).right;
                    String q = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 10)).value;
                    int cleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 7)).left;
                    int cright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 7)).right;
                    String c = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 7)).value;
                    int lleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)).left;
                    int lright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)).right;
                    String l = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)).value;
                    int vleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).left;
                    int vright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).right;
                    String v = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).value;
                    int rleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).left;
                    int rright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).right;
                    String r = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).value;
                    int sleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).left;
                    int sright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).right;
                    String s = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    crearGraficaPie(q, c, l, v, r, s, e);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("P", 3, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 13)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // P ::= DEF PIE Llaves_a Q Tipo Dos_p Porcentaje P_coma L V S E Llaves_c 
                {
                    Object RESULT = null;
                    int qleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 9)).left;
                    int qright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 9)).right;
                    String q = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 9)).value;
                    int pleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 6)).left;
                    int pright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 6)).right;
                    String p = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 6)).value;
                    int lleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).left;
                    int lright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).right;
                    String l = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).value;
                    int vleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).left;
                    int vright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).right;
                    String v = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).value;
                    int sleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).left;
                    int sright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).right;
                    String s = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    crearGraficaPie(q, p, l, v, v, s, e);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("P", 3, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 12)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // Q ::= Titulo Dos_p Nombre P_coma 
                {
                    String RESULT = null;
                    int nleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int nright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String n = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    RESULT = String.format(n);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Q", 15, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // L ::= Etiqueta Dos_p Corchete_a I Corchete_c P_coma 
                {
                    String RESULT = null;
                    int ileft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).left;
                    int iright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).right;
                    String i = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).value;
                    RESULT = String.format(i);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("L", 16, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // I ::= Nombre 
                {
                    String RESULT = null;
                    int nleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int nright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String n = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(n);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("I", 17, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // I ::= Nombre Coma I 
                {
                    String RESULT = null;
                    int nleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).left;
                    int nright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).right;
                    String n = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).value;
                    int comaleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int comaright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String coma = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    int ileft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int iright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String i = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(n + coma + i);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("I", 17, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // V ::= Valores Dos_p Corchete_a F Corchete_c P_coma 
                {
                    String RESULT = null;
                    int fleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).left;
                    int fright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).right;
                    String f = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).value;
                    RESULT = String.format(f);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("V", 18, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // F ::= EXPRESION 
                {
                    String RESULT = null;
                    int expresionleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int expresionright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String expresion = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(expresion);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F", 19, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // F ::= EXPRESION Coma F 
                {
                    String RESULT = null;
                    int expresionleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).left;
                    int expresionright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).right;
                    String expresion = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).value;
                    int comaleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int comaright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String coma = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    int fleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int fright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String f = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(expresion + coma + f);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F", 19, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // R ::= Total Dos_p EXPRESION P_coma 
                {
                    String RESULT = null;
                    int expresionleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int expresionright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String expresion = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    RESULT = String.format(expresion);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("R", 20, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // S ::= Unir Dos_p Corchete_a O Corchete_c P_coma 
                {
                    String RESULT = null;
                    int oleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).left;
                    int oright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).right;
                    String o = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).value;
                    RESULT = String.format(o);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S", 22, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // O ::= Llaves_a EXPRESION Coma EXPRESION Llaves_c 
                {
                    String RESULT = null;
                    int expresionleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).left;
                    int expresionright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).right;
                    String expresion = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).value;
                    int comaleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).left;
                    int comaright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).right;
                    String coma = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).value;
                    int expresion2left = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int expresion2right = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String expresion2 = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    RESULT = String.format(expresion + coma + expresion2);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("O", 21, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // O ::= Llaves_a EXPRESION Coma EXPRESION Llaves_c Coma O 
                {
                    String RESULT = null;
                    int expresionleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)).left;
                    int expresionright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)).right;
                    String expresion = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)).value;
                    int comaleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).left;
                    int comaright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).right;
                    String coma = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).value;
                    int expresion2left = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).left;
                    int expresion2right = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).right;
                    String expresion2 = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).value;
                    int coma2left = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int coma2right = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String coma2 = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    int oleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int oright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String o = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(expresion + coma + expresion2 + coma2 + o);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("O", 21, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // E ::= Extra Dos_p Nombre P_coma 
                {
                    String RESULT = null;
                    int nleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int nright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String n = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    RESULT = String.format(n);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E", 23, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // EXPRESION ::= S1 
                {
                    String RESULT = null;
                    int expresionleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int expresionright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String expresion = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    contarExpresion();
                    RESULT = String.format(expresion);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION", 13, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // S1 ::= Numero S2 
                {
                    String RESULT = null;
                    int numeroleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int numeroright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String numero = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    int s2left = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int s2right = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String s2 = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(numero + s2);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S1", 5, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 34: // S1 ::= Parentesis_a S1 Parentesis_c S2 
                {
                    String RESULT = null;
                    int paleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).left;
                    int paright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).right;
                    String pa = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).value;
                    int s1left = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).left;
                    int s1right = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).right;
                    String s1 = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).value;
                    int s2left = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int s2right = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String s2 = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(pa + s1 + s2);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S1", 5, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 35: // S1 ::= Numero 
                {
                    String RESULT = null;
                    int numleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int numright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String num = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(num);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S1", 5, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 36: // S1 ::= Decimal S2 
                {
                    String RESULT = null;
                    int decimalleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int decimalright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String decimal = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    int s2left = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int s2right = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String s2 = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(decimal + s2);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S1", 5, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 37: // S1 ::= Decimal 
                {
                    String RESULT = null;
                    int decimalleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int decimalright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String decimal = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(decimal);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S1", 5, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 38: // S1 ::= Parentesis_a S1 Parentesis_c 
                {
                    String RESULT = null;
                    int paleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).left;
                    int paright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).right;
                    String pa = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).value;
                    int s1left = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int s1right = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String s1 = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    int pcleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int pcright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String pc = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(pa + s1 + pc);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S1", 5, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 39: // S2 ::= Suma S1 
                {
                    String RESULT = null;
                    int sumaleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int sumaright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String suma = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    int s1left = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int s1right = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String s1 = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(suma + s1);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S2", 6, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 40: // S2 ::= Resta S1 
                {
                    String RESULT = null;
                    int restaleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int restaright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String resta = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    int s1left = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int s1right = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String s1 = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(resta + s1);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S2", 6, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 41: // S2 ::= Division S1 
                {
                    String RESULT = null;
                    int divleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int divright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String div = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    int s1left = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int s1right = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String s1 = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(div + s1);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S2", 6, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 42: // S2 ::= Multiplicacion S1 
                {
                    String RESULT = null;
                    int multleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int multright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String mult = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    int s1left = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int s1right = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String s1 = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(mult + s1);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S2", 6, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 43: // EJECUTAR ::= Ejecutar Parentesis_a Nombre Parentesis_c P_coma 
                {
                    String RESULT = null;
                    int nleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).left;
                    int nright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).right;
                    String n = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).value;
                    RESULT = String.format(n);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EJECUTAR", 24, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 44: // EJECUTAR ::= Ejecutar Parentesis_a Nombre Parentesis_c P_coma EJECUTAR 
                {
                    String RESULT = null;
                    int nleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).left;
                    int nright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).right;
                    String n = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).value;
                    int ejleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int ejright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String ej = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(n + "," + ej);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EJECUTAR", 24, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 45: // D1 ::= DEFINIR Identificador Igual S1 P_coma 
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("D1", 4, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 46: // D1 ::= DEFINIR Identificador Igual S1 P_coma D1 
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("D1", 4, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$Sintax$act_num + "found in internal parse table");

            }
        }

        /* end of method */
        /**
         * Method splitting the generated action code into several parts.
         */
        public final java_cup.runtime.Symbol CUP$Sintax$do_action(
                int CUP$Sintax$act_num,
                java_cup.runtime.lr_parser CUP$Sintax$parser,
                java.util.Stack CUP$Sintax$stack,
                int CUP$Sintax$top)
                throws java.lang.Exception {
            return CUP$Sintax$do_action_part00000000(
                    CUP$Sintax$act_num,
                    CUP$Sintax$parser,
                    CUP$Sintax$stack,
                    CUP$Sintax$top);
        }
    }

}
